/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeleteOtherTableFromImportArgs } from "./DeleteOtherTableFromImportArgs";
import { OtherTableFromImportCountArgs } from "./OtherTableFromImportCountArgs";
import { OtherTableFromImportFindManyArgs } from "./OtherTableFromImportFindManyArgs";
import { OtherTableFromImportFindUniqueArgs } from "./OtherTableFromImportFindUniqueArgs";
import { OtherTableFromImport } from "./OtherTableFromImport";
import { OtherTableFromImportService } from "../otherTableFromImport.service";
@graphql.Resolver(() => OtherTableFromImport)
export class OtherTableFromImportResolverBase {
  constructor(protected readonly service: OtherTableFromImportService) {}

  async _otherTableFromImportsMeta(
    @graphql.Args() args: OtherTableFromImportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OtherTableFromImport])
  async otherTableFromImports(
    @graphql.Args() args: OtherTableFromImportFindManyArgs
  ): Promise<OtherTableFromImport[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OtherTableFromImport, { nullable: true })
  async otherTableFromImport(
    @graphql.Args() args: OtherTableFromImportFindUniqueArgs
  ): Promise<OtherTableFromImport | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OtherTableFromImport)
  async deleteOtherTableFromImport(
    @graphql.Args() args: DeleteOtherTableFromImportArgs
  ): Promise<OtherTableFromImport | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
